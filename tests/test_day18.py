from aoc.day18 import part1, part2, SnailFishPair

input_data = """[[[0,[5,8]],[[1,7],[9,6]]],[[4,[1,2]],[[1,4],2]]]
[[[5,[2,8]],4],[5,[[9,9],0]]]
[6,[[[6,2],[5,6]],[[7,6],[4,7]]]]
[[[6,[0,7]],[0,9]],[4,[9,[9,0]]]]
[[[7,[6,4]],[3,[1,3]]],[[[5,5],1],9]]
[[6,[[7,3],[3,2]]],[[[3,8],[5,7]],4]]
[[[[5,4],[7,7]],8],[[8,3],8]]
[[9,3],[[9,9],[6,[4,9]]]]
[[2,[[7,7],7]],[[5,8],[[9,3],[0,2]]]]
[[[[5,2],5],[8,[3,7]]],[[5,[7,5]],[4,4]]]
"""


def test_part1():
    assert part1(input_data) == 4140


def test_part2():
    assert part2(input_data) == 3993


def test_snailfishnumber_marshal():
    lis = [[[[[1, 2], 1], 2], 3], [4, [5, 6]]]
    n = SnailFishPair.from_list(lis)
    assert n.marshal() == lis


def test_explode():
    tests = {
        '[[[[0, 1], 2], 3], 4]': (False, '[[[[0, 1], 2], 3], 4]'),
        '[[[[0,7],4],[[7,8],[6,0]]],[8,1]]':
        (False, '[[[[0,7],4],[[7,8],[6,0]]],[8,1]]'),
        '[7,[6,[5,[4,[3,2]]]]]': (True, '[7,[6,[5,[7,0]]]]'),
        '[[6,[5,[4,[3,2]]]],1]': (True, '[[6,[5,[7,0]]],3]'),
        '[[3,[2,[1,[7,3]]]],[6,[5,[4,[3,2]]]]]':
        (True, '[[3,[2,[8,0]]],[9,[5,[4,[3,2]]]]]'),
        '[[3,[2,[8,0]]],[9,[5,[4,[3,2]]]]]':
        (True, '[[3,[2,[8,0]]],[9,[5,[7,0]]]]'),
        '[[[[0,[4,5]],[0,0]],[[[4,5],[2,6]],[9,5]]],[7,[[[3,7],[4,3]],[[6,3],[8,8]]]]]':
        (True,
         '[[[[4,0],[5,0]],[[[4,5],[2,6]],[9,5]]],[7,[[[3,7],[4,3]],[[6,3],[8,8]]]]]'
         ),
    }
    for test_input, expected in tests.items():
        expected_return, expected_state = expected

        n = SnailFishPair.from_list(eval(test_input))
        assert n.explode() == expected_return
        assert n.marshal() == eval(expected_state)


def test_split():
    tests = {
        '[[[[0,7],4],[[7,8],[6,0]]],[8,1]]':
        (False, '[[[[0,7],4],[[7,8],[6,0]]],[8,1]]'),
        '[[[[0,7],4],[15,[0,13]]],[1,1]]':
        (True, '[[[[0,7],4],[[7,8],[0,13]]],[1,1]]'),
        '[[[[0,7],4],[[7,8],[0,13]]],[1,1]]':
        (True, '[[[[0,7],4],[[7,8],[0,[6,7]]]],[1,1]]'),
    }
    for test_input, expected in tests.items():
        expected_return, expected_state = expected

        n = SnailFishPair.from_list(eval(test_input))
        assert n.split() == expected_return
        assert n.marshal() == eval(expected_state)


def test_reduce():
    n = SnailFishPair.from_list([[[[[4, 3], 4], 4], [7, [[8, 4], 9]]], [1, 1]])
    n.reduce()
    assert n.marshal() == [[[[0, 7], 4], [[7, 8], [6, 0]]], [8, 1]]


def test_add():
    tests = {
        ('[1,1]', '[2,2]'):
        '[[1,1],[2,2]]',
        ('[[[0,[4,5]],[0,0]],[[[4,5],[2,6]],[9,5]]]', '[7,[[[3,7],[4,3]],[[6,3],[8,8]]]]'):
        '[[[[4,0],[5,4]],[[7,7],[6,0]]],[[8,[7,7]],[[7,9],[5,0]]]]',
        ('[[[[4,0],[5,4]],[[7,7],[6,0]]],[[8,[7,7]],[[7,9],[5,0]]]]', '[[2,[[0,8],[3,4]]],[[[6,7],1],[7,[1,6]]]]'):
        '[[[[6,7],[6,7]],[[7,7],[0,7]]],[[[8,7],[7,7]],[[8,8],[8,0]]]]',
        ('[[[[6,7],[6,7]],[[7,7],[0,7]]],[[[8,7],[7,7]],[[8,8],[8,0]]]]', '[[[[2,4],7],[6,[0,5]]],[[[6,8],[2,8]],[[2,1],[4,5]]]]'):
        '[[[[7,0],[7,7]],[[7,7],[7,8]]],[[[7,7],[8,8]],[[7,7],[8,7]]]]',
        ('[[[[7,0],[7,7]],[[7,7],[7,8]]],[[[7,7],[8,8]],[[7,7],[8,7]]]]', '[7,[5,[[3,8],[1,4]]]]'):
        '[[[[7,7],[7,8]],[[9,5],[8,7]]],[[[6,8],[0,8]],[[9,9],[9,0]]]]',
        ('[[[[7,7],[7,8]],[[9,5],[8,7]]],[[[6,8],[0,8]],[[9,9],[9,0]]]]', '[[2,[2,2]],[8,[8,1]]]'):
        '[[[[6,6],[6,6]],[[6,0],[6,7]]],[[[7,7],[8,9]],[8,[8,1]]]]',
        ('[[[[6,6],[6,6]],[[6,0],[6,7]]],[[[7,7],[8,9]],[8,[8,1]]]]', '[2,9]'):
        '[[[[6,6],[7,7]],[[0,7],[7,7]]],[[[5,5],[5,6]],9]]',
        ('[[[[6,6],[7,7]],[[0,7],[7,7]]],[[[5,5],[5,6]],9]]', '[1,[[[9,3],9],[[9,0],[0,7]]]]'):
        '[[[[7,8],[6,7]],[[6,8],[0,8]]],[[[7,7],[5,0]],[[5,5],[5,6]]]]',
        ('[[[[7,8],[6,7]],[[6,8],[0,8]]],[[[7,7],[5,0]],[[5,5],[5,6]]]]', '[[[5,[7,4]],7],1]'):
        '[[[[7,7],[7,7]],[[8,7],[8,7]]],[[[7,0],[7,7]],9]]',
        ('[[[[7,7],[7,7]],[[8,7],[8,7]]],[[[7,0],[7,7]],9]]', '[[[[4,2],2],6],[8,7]]'):
        '[[[[8,7],[7,7]],[[8,6],[7,7]]],[[[0,7],[6,6]],[8,7]]]',
    }
    for test_input, expected in tests.items():
        a, b = (SnailFishPair.from_list(eval(i)) for i in test_input)
        assert SnailFishPair.add(a, b).marshal() == eval(expected)


def test_magnitude():
    tests = {
        '[[1,2],[[3,4],5]]': 143,
        '[[[[0,7],4],[[7,8],[6,0]]],[8,1]]': 1384,
        '[[[[1,1],[2,2]],[3,3]],[4,4]]': 445,
        '[[[[3,0],[5,3]],[4,4]],[5,5]]': 791,
        '[[[[5,0],[7,4]],[5,5]],[6,6]]': 1137,
        '[[[[8,7],[7,7]],[[8,6],[7,7]]],[[[0,7],[6,6]],[8,7]]]': 3488,
    }
    for test_input, expected in tests.items():
        assert SnailFishPair.from_list(
            eval(test_input)).magnitude() == expected
